<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.diseasereport.mapper.CasesMapper">
    <resultMap id="BaseResultMap" type="com.example.diseasereport.model.Cases">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="userId" jdbcType="INTEGER" property="userId"/>
        <result column="doctorId" jdbcType="INTEGER" property="doctorId"/>
        <result column="status" jdbcType="VARCHAR" property="status"/>
        <result column="severity" jdbcType="VARCHAR" property="severity"/>
        <result column="updateTime" jdbcType="VARCHAR" property="updateTime"/>
    </resultMap>
    <delete id="deleteById" parameterType="java.lang.Integer">
    delete from Cases
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.example.diseasereport.model.Cases"
            useGeneratedKeys="true" keyProperty="id">
    insert into Cases (id, userId, doctorId, 
      status, severity, updateTime)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{doctorId,jdbcType=INTEGER}, 
      #{status,jdbcType=VARCHAR}, #{severity,jdbcType=VARCHAR}, #{updateTime,jdbcType=VARCHAR})
  </insert>
    <update id="updateById" parameterType="com.example.diseasereport.model.Cases">
    update Cases
    set userId = #{userId,jdbcType=INTEGER},
      doctorId = #{doctorId,jdbcType=INTEGER},
      status = #{status,jdbcType=VARCHAR},
      severity = #{severity,jdbcType=VARCHAR},
      updateTime = #{updateTime,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <select id="selectById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, userId, doctorId, status, severity, updateTime
    from Cases
    where id = #{id,jdbcType=INTEGER}
  </select>
    <select id="selectAll" resultType="com.example.diseasereport.response.CasesResponse">
    select ui.name       as username,
       ui.schoolId   as schoolId,
       ui.gender     as gender,
       ui.age        as age,
       ui.department as department,
       d.name        as doctorName,
       d.phone       as doctorPhone,
       c.status      as status,
       c.severity    as severity,
       c.updateTime  as updateTime
    from Cases c
         left join Doctor d on c.doctorId = d.userId
         left join UserInfo ui on c.userId = ui.userId
  </select>
    <select id="selectByUserId" resultType="com.example.diseasereport.model.Cases">
        select *
        from Cases
        where userId=#{userId}
    </select>

    <update id="updateByUserId" parameterType="com.example.diseasereport.model.Cases"
            useGeneratedKeys="true" keyProperty="id">
        update Cases
        set
          doctorId = #{doctorId,jdbcType=INTEGER},
          status = #{status,jdbcType=VARCHAR},
          severity = #{severity,jdbcType=VARCHAR},
          updateTime = #{updateTime,jdbcType=VARCHAR}
        where userId = #{userId}
    </update>

    <select id="countAll" resultType="java.lang.Long">
        select count(id) as total
        from Cases
    </select>

    <select id="groupByAge" resultType="java.util.HashMap">
        select age, count(*) as `count`
        from Cases left join UserInfo using(userId)
        group by age
    </select>

    <select id="groupByGender" resultType="java.util.HashMap">
        select gender, count(*) as `count`
        from Cases left join UserInfo using(userId)
        group by gender
    </select>

    <select id="groupBySeverity" resultType="java.util.HashMap">
        select severity, count(*) as `count`
        from Cases left join UserInfo using(userId)
        group by severity
    </select>
</mapper>